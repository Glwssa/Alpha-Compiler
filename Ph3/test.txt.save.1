nl = "\n";

function TreeNode (p, l, r) {
	parent  = 0;
	left	= 0;
	right	= 0; 
	if (argument(0)) parent = p;
	if (argument(1)) left = l;
	if (argument(totalarguments()-1)) right = r; //or if (argument[2]) right = r;

	return  [
		{"class" : "TreeNode"},
		{"parent": parent},	
		{"left"	 : left},
		{"right" : right},
		{"info"	 : 0},
		{"marked": false}
	];
}

function Stack () {

	return [
		{"class" : "Stack"},
		{"next"  : 0},
		{"data"  : []},
		{"empty" : (function (self){
			return self.next == 0;
		})},
		
		{"push"	 : (function (self, data){
			self.data[self.next++] = data;
		})},
		
		{"pop"	 : (function (self){
			if (self.next > 0)
				self.data[--self.next] = nil;
		})},
		
		{"top" 	 : (function (self){
			return self.data[self.next-1];
		})}
	];
}

function PrintTree (root) {
	if (root)
		print(root.info, ::nl);

	if (root.left)
		PrintTree(root.left);

	if (root.right)
		PrintTree(root.right);
}

